name: CI/CD Pipeline
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches-ignore:
      - main
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm ci
      - name: Build Project
        run: npm run build
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: dist

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm ci
      - name: Run Linter
        run: npm run lint

  deploy_preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [ build, lint]
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel
      - name: Pull Preview Environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Preview
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Preview
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  deploy_production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [ build, lint]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel
      - name: Pull Production Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Production
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Production
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
